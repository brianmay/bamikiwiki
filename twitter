#!/usr/bin/python

import ConfigParser
import sys
import tweepy
import datetime
import codecs
import os
import filecmp
import pytz

config = ConfigParser.ConfigParser()
config.read('config.cfg')

consumer_token = config.get('twitter', 'consumer_token')
consumer_secret = config.get('twitter', 'consumer_secret')
auth = tweepy.OAuthHandler(consumer_token, consumer_secret)

state = ConfigParser.ConfigParser()
state.read('state.cfg')
if not state.has_option('twitter', 'key') or not state.has_option('twitter', 'secret'):
    try:
        redirect_url = auth.get_authorization_url()
    except tweepy.TweepError:
        sys.stderr.write('Error! Failed to get request token.\n')
        sys.exit(1)

    sys.stdout.write("goto %s\n" % redirect_url)

    verifier = raw_input('Verifier:')

    try:
        auth.get_access_token(verifier)
    except tweepy.TweepError:
        sys.stderr.write('Error! Failed to get access token.\n')
        sys.exit(1)

    api = tweepy.API(auth)

    state.add_section("twitter")
    state.set('twitter', 'key', auth.access_token.key)
    state.set('twitter', 'secret', auth.access_token.secret)
    with open('state.cfg', 'wb') as configfile:
        state.write(configfile)
else:
    key = state.get('twitter', 'key')
    secret = state.get('twitter', 'secret')
    auth.set_access_token(key, secret)
    api = tweepy.API(auth)
    key = None
    secret = None

base = config.get('main', 'base')
timezone = pytz.timezone(config.get('main', 'timezone'))

all_status = {}

def tofirstdayinisoweek(year, week):
    ret = datetime.datetime.strptime('%04d-%02d-1' % (year, week), '%Y-%W-%w')
    if datetime.date(year, 1, 4).isoweekday() > 4:
        ret -= timedelta(days=7)
    return ret

def process_status(status):
    global lastweek, nextweek, all_status
    print status.created_at, status.text

    if getattr(status, 'retweeted_status', None) is not None:
        tweet_status = status.retweeted_status
    else:
        tweet_status = status

    author = tweet_status.author
    text = tweet_status.text
    created_at = tweet_status.created_at

    author_url = "https://twitter.com/%s" % (author.screen_name, )
    url = "https://twitter.com/%s/status/%s" % (author.screen_name, status.id_str)

    t = []
    t.append('<div class="tweet">')
    t.append('<img src="%s" alt="" />' % author.profile_image_url)
    t.append('<div class="tweet_text">')
    t.append('%s <a href="%s">@%s</a><br/>' % (author.name, author_url, author.screen_name))
    t.append('%s<br/>' % text)
    t.append('<a href="%s">%s</a>' % (url, created_at.replace(tzinfo=pytz.utc).astimezone(timezone)))

    if getattr(status, 'retweeted_status', None) is not None:
        t.append(', retweeted by <a href="%s">%s</a> at %s' % (
                author_url, status.author.screen_name,
                status.created_at.replace(tzinfo=pytz.utc).astimezone(timezone),
        ))
    t.append('</div>')
    t.append('</div>')
    t.append('\n\n')

    year, week, day = status.created_at.isocalendar()

    if year not in all_status:
        all_status[year] = {}

    if week not in all_status[year]:
        all_status[year][week] = {}

    all_status[year][week][status.id] = "".join(t)

    lastweek = tofirstdayinisoweek(year, week)
    nextweek = lastweek + datetime.timedelta(days=7)

    if datetime.datetime.now() >= nextweek:
        return False
    else:
        return True


# user_timeline

if state.has_option('twitter', 'user_timeline_last_id'):
    user_timeline_last_id = state.getint('twitter', 'user_timeline_last_id')
else:
    user_timeline_last_id = None

print "\nuser_timeline", user_timeline_last_id

last_id = user_timeline_last_id
for status in tweepy.Cursor(api.user_timeline, since_id=last_id).items():
    current_week = process_status(status)
    print current_week
    if not current_week:
        if user_timeline_last_id is None or user_timeline_last_id < status.id:
            user_timeline_last_id = status.id

print "done:", user_timeline_last_id


# retweeted_by_me

if state.has_option('twitter', 'retweeted_by_me_last_id'):
    retweeted_by_me_last_id = state.getint('twitter', 'retweeted_by_me_last_id')
else:
    retweeted_by_me_last_id = None

print "\nretweeted_by_me", retweeted_by_me_last_id

last_id = retweeted_by_me_last_id
for status in tweepy.Cursor(api.retweeted_by_me, since_id=last_id).items():
    current_week = process_status(status)
    print current_week
    if not current_week:
        if retweeted_by_me_last_id is None or retweeted_by_me_last_id < status.id:
            retweeted_by_me_last_id = status.id

print "done:", retweeted_by_me_last_id


for year in all_status:
    for week in all_status[year]:
        lastweek = tofirstdayinisoweek(year, week)
        nextweek = lastweek + datetime.timedelta(days=7)
        now_utc = datetime.datetime.utcnow()

        print nextweek, now_utc
        if nextweek <= now_utc:
            modified = nextweek
        else:
            modified = now_utc
        print nextweek, now_utc, modified

        tmpfile = "tempfile.mdwn"
        f = codecs.open(tmpfile, "w", "utf-8")
        title = "Twitter updates %s" % lastweek.date()

        f.write('[[!meta title="%s"]]\n' % title)
        f.write('[[!meta date="%s"]]\n' % modified.strftime("%Y-%m-%dT%H:%M:%S GMT"))
        f.write("# %s\n" % title)
        f.write("\n")

        for this_id in sorted(all_status[year][week]):
            f.write(all_status[year][week][this_id])

        now = datetime.date.today()

        f.write("\n")
        f.write("[[!tag %s]]\n" % "categories/tweets")
        f.close()

        name = "%s/tweets_%s.mdwn" % (lastweek.strftime("%Y"), lastweek.strftime("%Y-%m-%d"))
        name = os.path.join(base, name)

        print name
        if os.path.exists(name) and filecmp.cmp(tmpfile, name, shallow=False):
            os.remove(tmpfile)
        else:
            os.rename(tmpfile, name)

state.set('twitter', 'user_timeline_last_id', user_timeline_last_id)
state.set('twitter', 'retweeted_by_me_last_id', retweeted_by_me_last_id)
with open('state.cfg', 'wb') as configfile:
    state.write(configfile)

